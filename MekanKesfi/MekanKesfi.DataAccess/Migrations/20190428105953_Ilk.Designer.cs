// <auto-generated />
using System;
using MekanKesfi.DataAccess.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MekanKesfi.DataAccess.Migrations
{
    [DbContext(typeof(MekanKesfiContext))]
    [Migration("20190428105953_Ilk")]
    partial class Ilk
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Fotograflar", b =>
                {
                    b.Property<int>("FotografId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AnaFotograf");

                    b.Property<string>("FotografYol");

                    b.Property<int>("MekanlarId");

                    b.HasKey("FotografId");

                    b.HasIndex("MekanlarId");

                    b.ToTable("Fotograflar");
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Ilceler", b =>
                {
                    b.Property<int>("IlceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IlceAd");

                    b.Property<int>("IllerId");

                    b.HasKey("IlceId");

                    b.HasIndex("IllerId");

                    b.ToTable("Ilceler");
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Iller", b =>
                {
                    b.Property<int>("IlId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IlAd");

                    b.HasKey("IlId");

                    b.ToTable("Iller");
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Kullanicilar", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RollerId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RollerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Mekanlar", b =>
                {
                    b.Property<int>("MekanId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EMail");

                    b.Property<int>("IlcelerId");

                    b.Property<string>("KullanicilarId");

                    b.Property<decimal>("Lat");

                    b.Property<decimal>("Lng");

                    b.Property<string>("MekanAd");

                    b.Property<string>("MekanAdres");

                    b.Property<string>("Telefon");

                    b.HasKey("MekanId");

                    b.HasIndex("IlcelerId");

                    b.HasIndex("KullanicilarId");

                    b.ToTable("Mekanlar");
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Reklamlar", b =>
                {
                    b.Property<int>("ReklamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MekanlarId");

                    b.Property<DateTime>("ReklamBitis");

                    b.Property<string>("ReklamDetay");

                    b.Property<string>("ReklamFoto");

                    b.HasKey("ReklamId");

                    b.HasIndex("MekanlarId");

                    b.ToTable("Reklamlar");
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Roller", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Urunler", b =>
                {
                    b.Property<int>("UrunId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MekanlarId");

                    b.Property<string>("UrunAd");

                    b.Property<decimal>("UrunFiyat");

                    b.HasKey("UrunId");

                    b.HasIndex("MekanlarId");

                    b.ToTable("Urunler");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Fotograflar", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Mekanlar", "Mekanlar")
                        .WithMany("Fotograflar")
                        .HasForeignKey("MekanlarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Ilceler", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Iller", "Iller")
                        .WithMany("Ilceler")
                        .HasForeignKey("IllerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Kullanicilar", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Roller")
                        .WithMany("Kullanicilar")
                        .HasForeignKey("RollerId");
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Mekanlar", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Ilceler", "Ilceler")
                        .WithMany("Mekanlar")
                        .HasForeignKey("IlcelerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MekanKesfi.Entities.Concrete.Kullanicilar", "Kullanicilar")
                        .WithMany("Mekanlar")
                        .HasForeignKey("KullanicilarId");
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Reklamlar", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Mekanlar", "Mekanlar")
                        .WithMany("Reklamlar")
                        .HasForeignKey("MekanlarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MekanKesfi.Entities.Concrete.Urunler", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Mekanlar", "Mekanlar")
                        .WithMany("Urunler")
                        .HasForeignKey("MekanlarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Roller")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Kullanicilar")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Kullanicilar")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Roller")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MekanKesfi.Entities.Concrete.Kullanicilar")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MekanKesfi.Entities.Concrete.Kullanicilar")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
